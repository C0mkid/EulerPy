{"name":"EulerPy","tagline":"Python-based Project Euler command line tool.","body":"EulerPy\r\n=======\r\n\r\nEulerPy is a command line tool designed to streamline the process of solving Project Euler problems using Python. The package focuses on two main tasks: firstly, to create Python \"template\" files with a docstring containing the text of a Project Euler problem for ease-of-reference, and secondly, to check whether a problem has been solved correctly.\r\n\r\nInstallation\r\n------------\r\n\r\nEulerPy can be installed (and updated) from PyPI using [pip](http://www.pip-installer.org/en/latest/index.html):\r\n\r\n``` {.sourceCode .bash}\r\n$ pip install --upgrade EulerPy\r\n```\r\n\r\nConversely, it can be uninstalled using [pip](http://www.pip-installer.org/en/latest/index.html) as well.\r\n\r\n``` {.sourceCode .bash}\r\n$ pip uninstall EulerPy\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nFirst, you'll want to `cd` to the directory where your Project Euler files are being stored.\r\n\r\n``` {.sourceCode .bash}\r\n$ mkdir ~/project-euler\r\n$ cd ~/project-euler\r\n```\r\n\r\nAt this point, you'll probably want to run the `euler` command, which will prompt to create `001.py`, a file containing the text to Project Euler problem \\#1 as its docstring.\r\n\r\n``` {.sourceCode .bash}\r\n$ euler\r\nNo Project Euler files found in the current directory.\r\nGenerate file for problem #1? [Y/n]: Y\r\nSuccessfully created \"001.py\".\r\n\r\n$ cat 001.py\r\n\"\"\"\r\nProject Euler Problem #1\r\n=========================\r\n\r\nIf we list all the natural numbers below 10 that are multiples of 3 or 5,\r\nwe get 3, 5, 6 and 9. The sum of these multiples is 23.\r\n\r\nFind the sum of all the multiples of 3 or 5 below 1000.\r\n\"\"\"\r\n```\r\n\r\nAt this point, you can open up your editor of choice and code up a solution to the problem, making sure to `print()` the output. Once you feel that you've solved the problem, run the `euler` command again to verify your solution is correct. If the answer is correct, the solution will be printed in green and the script will ask to generate the next problem file. If incorrect, the solution will be printed in red instead. Additionally, the time elapsed during the verification will also be printed.\r\n\r\n``` {.sourceCode .bash}\r\n$ euler\r\nChecking \"001.py\" against solution: [no output] # (output in red)\r\n\r\n$ echo print 42 >> 001.py\r\n$ euler\r\nChecking \"001.py\" against solution: 42 # (output in green)\r\nGenerate file for problem #2? [Y/n]: Y\r\nSuccessfully created \"002.py\".\r\n```\r\n\r\nEulerPy also comes with five options that act as commands. (The `--help` option can be used to display a summary of all of the options.)\r\n\r\n### `--cheat / -c`\r\n\r\nThe `--cheat` option will print the answer to a problem after prompting the user to ensure that they want to see it. If no problem argument is given, it will print the answer to the problem that they are currently working on.\r\n\r\n``` {.sourceCode .bash}\r\n$ euler --cheat\r\nView answer to problem #2? [y/N]: Y\r\nThe answer to problem #2 is <redacted>.\r\n\r\n$ euler --cheat 100\r\nView answer to problem #100? [y/N]: Y\r\nThe answer to problem #100 is <redacted>.\r\n```\r\n\r\n### `--generate / -g`\r\n\r\nThe `--generate` option will create a Python file for the given problem number. If no problem number is given, it will overwrite the most recent problem with a file containing only the problem docstring (after prompting the user).\r\n\r\n``` {.sourceCode .bash}\r\n$ euler --generate\r\nGenerate file for problem #2? [Y/n]: Y\r\n\"002.py\" already exists. Overwrite? [y/N]:\r\nSuccessfully created \"002.py\".\r\n\r\n$ euler --generate 5\r\nGenerate file for problem #5? [Y/n]: n\r\nAborted!\r\n```\r\n\r\n`euler <problem>` is equivalent to `euler --generate <problem>` if the file **does not** exist.\r\n\r\n``` {.sourceCode .bash}\r\n$ cat 005.py\r\ncat: 005.py: No such file or directory\r\n\r\n$ euler 5\r\nGenerate file for problem #5? [Y/n]: n\r\nAborted!\r\n```\r\n\r\n### `--preview / -p`\r\n\r\nThe `--preview` option will print the text of a given problem to the terminal; if no problem number is given, it will print the current problem instead.\r\n\r\n``` {.sourceCode .bash}\r\n$ euler --preview\r\nProject Euler Problem #2\r\nEach new term in the Fibonacci sequence is generated by adding the\r\nprevious two terms. By starting with 1 and 2, the first 10 terms will be:\r\n\r\n                  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\r\n\r\nFind the sum of all the even-valued terms in the sequence which do not\r\nexceed four million.\r\n\r\n$ euler --preview 3\r\nProject Euler Problem #3\r\nThe prime factors of 13195 are 5, 7, 13 and 29.\r\n\r\nWhat is the largest prime factor of the number 600851475143?\r\n```\r\n\r\n### `--skip / -s`\r\n\r\nThe `--skip` option will prompt the user to \"skip\" to the next problem.\r\n\r\n``` {.sourceCode .bash}\r\n$ euler --skip\r\nCurrent problem is problem #2.\r\nGenerate file for problem #3? [y/N]: Y\r\nSuccessfully created \"003.py\".\r\n```\r\n\r\n### `--verify / -v`\r\n\r\nThe `--verify` option will check whether a given problem file outputs the correct solution to the problem. If no problem number is given, it will check the current problem.\r\n\r\n``` {.sourceCode .bash}\r\n$ euler --verify\r\nChecking \"003.py\" against solution: [no output] # (output in red)\r\n\r\n$ euler --verify 1\r\nChecking \"001.py\" against solution: <redacted> # (output in green)\r\n```\r\n\r\n`euler <problem>` is equivalent to `euler --verify <problem>` if the file **does** exist.\r\n\r\n``` {.sourceCode .bash}\r\n$ cat 001.py\r\n\"\"\"\r\nProject Euler Problem #1\r\n=========================\r\n...\r\n\r\n\r\n\"\"\"\r\n\r\n$ euler 1\r\nChecking \"001.py\" against solution: <redacted>\r\n```\r\n\r\nContributing\r\n------------\r\n\r\nSee [CONTRIBUTING.rst](https://github.com/iKevinY/EulerPy/blob/master/CONTRIBUTING.rst).\r\n\r\nMiscellaneous\r\n-------------\r\n\r\nThe text for problems 1 through 202 were derived from Kyle Keen's [Local Euler](http://kmkeen.com/local-euler/) project, and the solutions in [solutions.txt](https://github.com/iKevinY/EulerPy/blob/master/EulerPy/solutions.txt) were derived from the [projecteuler-solutions wiki](https://code.google.com/p/projecteuler-solutions/).\r\n\r\nSee [this blog post](http://kevinyap.ca/2014/06/eulerpy-streamlining-project-euler/) for insight into the development process.\r\n\r\nLicense\r\n-------\r\n\r\nEulerPy is licensed under the [MIT License](https://github.com/iKevinY/EulerPy/blob/master/LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}